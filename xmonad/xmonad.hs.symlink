import XMonad
import qualified XMonad.StackSet as W
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.EwmhDesktops
import XMonad.Layout.NoBorders
import XMonad.Layout.GridVariants as GV
import XMonad.Util.CustomKeys
import XMonad.Util.Scratchpad
import XMonad.Actions.CycleWS

main = xmonad defaultConfig
    { modMask = mod4Mask
    , handleEventHook = fullscreenEventHook
    , terminal = "st"
    , normalBorderColor = "gray30"
    , focusedBorderColor = "#0198E1"
    , borderWidth = 3
    , manageHook = myManageHook <+> manageScratchPad
    , layoutHook = myLayoutHook
    , workspaces = ["1:t", "2:t", "3:t", "4:t", "5:t", "6:t", "7:t", "8:t", "9:t"]
    , keys = customKeys delkeys inskeys
    }
    where
        delkeys :: XConfig l -> [(KeyMask, KeySym)]
        delkeys XConfig {modMask = modm} =
            [
            ]

        inskeys :: XConfig l -> [((KeyMask, KeySym), X ())]
        inskeys conf@(XConfig {modMask = modm}) =
            [ ((modm .|. controlMask, xK_l ), spawn "slock")
            , ((modm .|. controlMask, xK_p ), spawn "scrot")
            , ((modm .|. shiftMask,   xK_equal), sendMessage $ GV.IncMasterCols 1)
            , ((modm .|. shiftMask,   xK_minus), sendMessage $ GV.IncMasterCols (-1))
            , ((modm .|. controlMask, xK_equal), sendMessage $ GV.IncMasterRows 1)
            , ((modm .|. controlMask, xK_minus), sendMessage $ GV.IncMasterRows (-1))
            , ((modm .|. controlMask, xK_r), swapNextScreen) -- swap screens
            , ((mod4Mask, xK_f), scratchPad)
            ]
            where
                scratchPad = scratchpadSpawnActionTerminal "urxvt"

myLayoutHook = smartBorders $ avoidStruts $ tiled ||| Mirror tiled ||| columns ||| Full
    where
        tiled   = Tall 1 delta ratio
        columns = GV.SplitGrid GV.L 1 2 (1/2) ratio delta
        ratio   = toRational(2 / (1 + sqrt(5)::Double))
        delta   = 4/100

-- find class name with xprop | grep CLASS
myManageHook = composeAll
        [ floatC "Gimp"
        ]
    where moveToC c w = className =? c --> doF (W.shift w)
          moveToT t w = title     =? t --> doF (W.shift w)
          floatC  c   = className =? c --> doFloat

manageScratchPad :: ManageHook
manageScratchPad = scratchpadManageHook (W.RationalRect l t w h)
  where
    h = 0.5     -- terminal height, 10%
    w = 1       -- terminal width, 100%
    t = 1 - h   -- distance from top edge, 90%
    l = 1 - w   -- distance from left edge, 0%
