" .vimrc
" Author: Yves Ineichen

" first the disabled features due to security concerns
set modelines=0
"let g:secure_modelines_verbose=0    " securemodelines vimscript
"let g:secure_modelines_modelines=15 " 15 available modelines

" ---------------------------------------------------------------------------
" Vundle
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()

Bundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Bundle 'airblade/vim-gitgutter'
Bundle 'chriskempson/base16-vim'
Bundle 'gmarik/vundle'
Bundle 'godlygeek/tabular'
Bundle 'kchmck/vim-coffee-script'
Bundle 'kien/ctrlp.vim'
Bundle 'leafgarland/typescript-vim'
Bundle 'mattn/gist-vim'
Bundle 'sjl/gundo.vim'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-sleuth'
Bundle 'tpope/vim-surround'
Bundle 'int3/vim-extradite'
Bundle 'sjl/splice.vim'
Bundle 'vim-scripts/YankRing.vim'
Bundle 'jpalardy/vim-slime'
Bundle 'scrooloose/nerdcommenter'
Bundle 'ervandew/supertab'
Bundle 'easymotion/vim-easymotion'
Bundle 'majutsushi/tagbar'
Bundle 'davidhalter/jedi-vim'
Bundle 'vim-syntastic/syntastic'

"TODO: try
"Bundle 'FooSoft/vim-argwrap'

" ---------------------------------------------------------------------------
" basic options

filetype plugin indent on
set autoindent smartindent    " auto/smart indent
set tabstop=4
set softtabstop=4
set noexpandtab
set copyindent
set scrolloff=3               " keep at least 3 lines above/below
set sidescrolloff=5           " keep at least 5 lines left/right
set backspace=indent,eol,start
set list                      " enable custom list chars
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮    " replace tabs, eol
set fillchars=diff:⣿,vert:│

set breakindent               " visually breaks lines using the same indentation
let &showbreak = '  ↪'           " show breaks
set nowrap

set colorcolumn=+1
"set tw=78                     " default textwidth is a max of 78
"set formatprg=par\ -w80rq
set formatoptions-=t

set encoding=utf-8
set hidden
set nonumber
"set norelativenumber
"set undofile
set undoreload=10000
set shell=/bin/zsh
set matchtime=3
set splitbelow
set splitright
set autowrite
set shiftround
set title
set spellfile=~/.vim/custom-dictionary.utf-8.add

set ruler                     " show the line number on the bar
set more                      " use more prompt
set autoread                  " watch for file changes
set nohidden                  " close the buffer when I close a tab
set lazyredraw                " don't redraw when don't have to
set showmode                  " show mode on last line
set showcmd                   " Show us the command we're typing
set nocompatible              " vim, not vi
set showfulltag               " show full completion tags
set noerrorbells              " no error bells please
set linebreak
set cmdheight=2               " command line two lines high
set undolevels=1000           " 1000 undos
set updatecount=100           " switch every 100 chars
set ttyfast                   " we have a fast terminal
"set foldmethod=syntax         " fold on syntax automagically, always
set foldmethod=manual         " only manual folding
set whichwrap+=<,>,h,l        " backspaces and cursor keys wrap to
set magic                     " Enable the "magic"
set visualbell t_vb=          " Disable ALL bells
set cursorline                " show the cursor line
set matchpairs+=<:>           " add < and > to match pairs
set t_Co=256
set virtualedit+=block
set laststatus=2

" Time out on key codes but not mappings.
set notimeout
set ttimeout
set ttimeoutlen=10

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

let mapleader = ","
let maplocalleader=','        " all my macros start with ,

" strip all whitespaces at save
autocmd BufWritePre * :%s/\s\+$//e

autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview

" trying autosave and co
set autoread " autoread files if changed outside and not locally, on focus events, does not work out of the box in tmux vim
au FocusLost * :wa

" improve editing TeX files
autocmd Bufread,BufNewFile  *.tex setlocal tabstop=2 shiftwidth=2 spell
" less spacy for Python files
autocmd Bufread,BufNewFile  *.py setlocal tabstop=2 shiftwidth=2

" Use <localleader>1/2/3 to add headings.
au BufNewFile,BufRead *.md setlocal filetype=markdown
au Filetype markdown nnoremap <buffer> <localleader>1 yypVr=
au Filetype markdown nnoremap <buffer> <localleader>2 yypVr-
au Filetype markdown nnoremap <buffer> <localleader>3 I### <ESC>

syntax on
set background=dark
colorscheme base16-ocean
let g:AutoClosePreservDotReg=0


" ---------------------------------------------------------------------------
" Settings for Easymotion

nmap s <Plug>(easymotion-overwin-f)
map <Leader>' <Plug>(easymotion-prefix)


" ---------------------------------------------------------------------------
" Settings for yankring

let g:yankring_history_dir="~/.vim/"
let g:yankring_history_file=".yank.txt"

function! YRRunAfterMaps()
    nnoremap Y :<C-U>YRYankCount 'y$'<CR>
    omap <expr> L YRMapsExpression("", "$")
    omap <expr> H YRMapsExpression("", "^")
endfunction


" ---------------------------------------------------------------------------
" Settings for jedi

let g:jedi#use_splits_not_buffers = "right"
let g:jedi#popup_on_dot = 0
let g:jedi#show_call_signatures = "2"

let g:jedi#goto_command = ''
nmap ,dd :call jedi#goto()<cr>zt " not sure if that is
nmap ,dt :tab split<cr>,dd
nmap ,ds <c-w>s,dd
nmap ,dv <c-w>v,dd
nmap ,dp <c-w>} " alternative for preview on tag

" ---------------------------------------------------------------------------
" Settings for Tagbar

nmap <leader>\ :TagbarToggle<CR>


" ---------------------------------------------------------------------------
"  searching

" Use sane regexes.
nnoremap / /\v
vnoremap / /\v

set incsearch                 " incremental search
set ignorecase                " search ignoring case
set smartcase                 " Ignore case when searching lowercase
set hlsearch                  " highlight the search
set showmatch                 " show matching bracket
set gdefault                  " automatically use /g with search & replace

" Clear matches
noremap <leader><space> :noh<cr>:call clearmatches()<cr>

" Open a Quickfix window for the last search.
nnoremap <silent> <leader>? :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>

set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=*.luac                           " Lua byte code
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files


" ---------------------------------------------------------------------------
"  mouse stuff

"set mouse=a                  " mouse support in all modes
set mousehide                 " hide the mouse when typing
" this makes the mouse paste a block of text without formatting it
" (good for code)
map <MouseMiddle> <esc>"*p


" ---------------------------------------------------------------------------
"  backup options
set nobackup
set nowritebackup
set noswapfile
set noundofile


" ---------------------------------------------------------------------------
" spelling...

if v:version >= 700

  setlocal spell spelllang=en_us
  nmap <LocalLeader>ss :set spell!<CR>

endif
" default to no spelling
set nospell
set dictionary=/usr/share/dict/words



" ---------------------------------------------------------------------------
" Settings for Easymotion

nmap s <Plug>(easymotion-overwin-f)
map <Leader>' <Plug>(easymotion-prefix)


" ---------------------------------------------------------------------------
" Settings for jedi

"let g:jedi#use_splits_not_buffers = "right"
let g:jedi#popup_on_dot = 0
let g:jedi#show_call_signatures = "2"

let g:jedi#goto_command = ''
nmap ,dd :call jedi#goto()<cr>zt " not sure if that is
nmap ,dt :tab split<cr>,dd
nmap ,ds <c-w>s,dd
nmap ,dv <c-w>v,dd
nmap ,dp <c-w>} " alternative for preview on tag


" ---------------------------------------------------------------------------
" Settings for Tagbar

nmap <leader>\ :TagbarToggle<CR>


" ---------------------------------------------------------------------------
" some useful mappings

map ,ww :set wrap!<cr> " toggle wrapping (on or off)
" toggle list mode
nmap <LocalLeader>tl :set list!<cr>
" toggle paste mode
nmap <LocalLeader>pp :set paste!<cr>
" change directory to that of current file
nmap <LocalLeader>cd :cd%:p:h<cr>
" change local directory to that of current file
nmap <LocalLeader>lcd :lcd%:p:h<cr>
" correct type-o's on exit
nmap q: :q
" save and build
nmap <LocalLeader>wm  :w<cr>:make<cr>
" ,tt will toggle taglist on and off
nmap <LocalLeader>tt :Tlist<cr>
" When I'm pretty sure that the first suggestion is correct
map <LocalLeader>r 1z=
" If I forgot to sudo vim a file, do that with :w!!
"FIXME
"cmap w!! %!sudo tee > /dev/null %
" Fix the # at the start of the line
inoremap # X<BS>#
" When I forget I'm in Insert mode, how often do you type 'jj' anyway?:
imap jj <Esc>

nnoremap <leader>q gqip
nnoremap <leader>v V']

" undo tree (gundo)
nnoremap <F5> :GundoToggle<CR>

" run pdflatex on currently open file
nmap <LocalLeader>pl :!pdflatex %<cr><cr>

" vimrc editing. Automatically reload the file after saving it.
" Because there is no point in editing the file and *not* reloading
" it, right?
nnoremap <leader>ev <C-w>s<C-w>j<C-w>L:e $MYVIMRC<cr>
autocmd! bufwritepost .vimrc source %

noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" <m-j> and <m-k> to drag lines in any mode
noremap ∆ :m+<CR>
noremap ˚ :m-2<CR>
inoremap ∆ <Esc>:m+<CR>
inoremap ˚ <Esc>:m-2<CR>
vnoremap ∆ :m'>+<CR>gv
vnoremap ˚ :m-2<CR>gv


" ---------------------------------------------------------------------------
" Gist
let g:gist_post_private = 1


" ---------------------------------------------------------------------------
" Settings for yankring

let g:yankring_history_dir="~/.vim/"
let g:yankring_history_file=".yank.txt"

function! YRRunAfterMaps()
    nnoremap Y :<C-U>YRYankCount 'y$'<CR>
    omap <expr> L YRMapsExpression("", "$")
    omap <expr> H YRMapsExpression("", "^")
endfunction


" ---------------------------------------------------------------------------
" Ctrl-P

let g:ctrlp_working_path_mode = 0 " always base off initial working folder
let g:ctrlp_switch_buffer = 0 " don't switch between splits when selecting a file/buffer to open, stay on split, makes it easier to open same file in many splits
"let g:ctrlp_jump_to_buffer = 0
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20,results:20'

let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_match_current_file = 1 " match files even when it's the current file
let g:ctrlp_map = '<leader>,'
nnoremap <leader>. :CtrlPTag<cr>
nnoremap <leader>t :CtrlPBufTag<cr>
nnoremap <leader>b :CtrlPBuffer<cr>

let g:ctrlp_working_path_mode = 0 " always base off initial working folder
let g:ctrlp_switch_buffer = 0 " don't switch between splits when selecting a file/buffer to open, stay on split, makes it easier to open same file in many splits
"let g:ctrlp_jump_to_buffer = 0
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20,results:20'

let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_match_current_file = 1 " match files even when it's the current file
let g:ctrlp_map = '<leader>,'
nnoremap <leader>. :CtrlPTag<cr>
nnoremap <leader>t :CtrlPBufTag<cr>
nnoremap <leader>b :CtrlPBuffer<cr>

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_match_window_reversed = 1
let g:ctrlp_max_height = 20
let g:ctrlp_extensions = ['tag']
let g:ctrlp_open_new_file = 'v'

let g:ctrlp_prompt_mappings = {
\ 'PrtSelectMove("j")':   ['<c-j>', '<down>', '<s-tab>'],
\ 'PrtSelectMove("k")':   ['<c-k>', '<up>', '<tab>'],
\ 'PrtHistory(-1)':       ['<c-n>'],
\ 'PrtHistory(1)':        ['<c-p>'],
\ 'ToggleFocus()':        ['<c-tab>'],
\ }

let ctrlp_filter_greps = "".
    \ "egrep -iv '\\.(" .
    \ "jar|class|swp|swo|log|so|o|pyc|jpe?g|png|gif|mo|po" .
    \ ")$' | " .
    \ "egrep -v '^(\\./)?(" .
    \ "deploy/|lib/|classes/|libs/|deploy/vendor/|.git/|.hg/|.svn/|.*migrations/" .
    \ ")'"

let my_ctrlp_user_command = "" .
    \ "find %s '(' -type f -or -type l ')' -maxdepth 15 -not -path '*/\\.*/*' | " .
    \ ctrlp_filter_greps

let my_ctrlp_git_command = "" .
    \ "cd %s && git ls-files | " .
    \ ctrlp_filter_greps

let g:ctrlp_user_command = ['.git/', my_ctrlp_git_command, my_ctrlp_user_command]


" ---------------------------------------------------------------------------
" folding
set foldlevelstart=0

" Space to toggle folds.
nnoremap <Space> za
vnoremap <Space> za
nmap <LocalLeader>fo  :%foldopen!<cr>
nmap <LocalLeader>fc  :%foldclose!<cr>

"nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>

" Make zO recursively open whatever top level fold we're in, no matter where the
" cursor happens to be.
nnoremap zO zCzO

function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()


" ---------------------------------------------------------------------------
" Powerline

let g:Powerline_symbols = 'fancy'
let g:Powerline_cache_enabled = 1


" ---------------------------------------------------------------------------
" Fugitive

nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>ga :Gadd<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gco :Gcheckout<cr>
nnoremap <leader>gci :Gcommit<cr>
nnoremap <leader>gm :Gmove<cr>
nnoremap <leader>gr :Gremove<cr>
"nnoremap <leader>gl :Shell git l19<cr>:wincmd \|<cr>

augroup ft_fugitive
    au!

    au BufNewFile,BufRead .git/index setlocal nolist
augroup END

" "Hub"
nnoremap <leader>H :Gbrowse<cr>
vnoremap <leader>H :Gbrowse<cr>


" ---------------------------------------------------------------------------
" Syntastic
" sudo -H pip install flake8
" flake8 syntax python 2 vs 3 is decided when installing flake8
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" from marcin
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_quiet_messages = { "type": "style" } " remove all style warnings
"let g:syntastic_python_flake8_args='--ignore=E501,E225,E251,E231,W191'
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
" from me
let g:syntastic_auto_jump = 1
let g:syntastic_mode_map = {"mode":"passive"}
nmap <leader>sc :w<cr>:SyntasticCheck<cr>
nmap <leader>sr :SyntasticReset<cr>
nmap ]l :lnext<CR>
nmap [l :lprev<CR>


" ---------------------------------------------------------------------------
" tabs
map <LocalLeader>tc :tabnew %<cr>    " create a new tab
map <LocalLeader>td :tabclose<cr>    " close a tab
map <LocalLeader>tn :tabnext<cr>     " next tab
map <LocalLeader>tp :tabprev<cr>     " previous tab
map <LocalLeader>tm :tabmove         " move a tab to a new location


" ---------------------------------------------------------------------------
" Functions

" Compile current coffee script buffer to javascript and open in new vsplit
function! CoffeeToJS()
    let res=expand('%')
    exe 'vnew | r !coffee -p ' . res
    set ft=javascript
endfunc
map <LocalLeader>cj :call CoffeeToJS()<cr>

