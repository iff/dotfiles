" .vimrc
" Author: Yves Ineichen

" first the disabled features due to security concerns
set modelines=0
"let g:secure_modelines_verbose=0    " securemodelines vimscript
"let g:secure_modelines_modelines=15 " 15 available modelines

" ---------------------------------------------------------------------------
" Plug

" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
call plug#begin('~/.vim/plugged')

Plug 'gmarik/vundle'
Plug 'morhetz/gruvbox'
Plug 'godlygeek/tabular'
Plug 'kien/ctrlp.vim'
Plug 'leafgarland/typescript-vim'
Plug 'sjl/gundo.vim'
Plug 'tpope/vim-airline'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'
Plug 'ervandew/supertab'
Plug 'easymotion/vim-easymotion'
Plug 'davidhalter/jedi-vim'
Plug 'vim-syntastic/syntastic'

" Git plugins
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'int3/vim-extradite'

" Test
Plug '~/src/fzf-ptags'

call plug#end()


" ---------------------------------------------------------------------------
" basic options

filetype plugin indent on
set autoindent smartindent
set tabstop=4
set softtabstop=4
set noexpandtab
set copyindent
set backspace=indent,eol,start
set nolist                      " enable custom list chars
"set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮    " replace tabs, eol
"set fillchars=diff:⣿,vert:│

set scrolloff=3               " keep at least 3 lines above/below
set sidescrolloff=5           " keep at least 5 lines left/right

set breakindent               " visually breaks lines using the same indentation
let &showbreak = '  ↪'        " show breaks
set nowrap

set colorcolumn=+1
set formatoptions-=t
set formatoptions+=j          " delete comment character when joining commented lines
set complete-=i

set viminfo^=!

set encoding=utf-8
set hidden
set nonumber
set undoreload=10000
set shell=/bin/zsh
set matchtime=3
set splitbelow
set splitright
set autowrite
set shiftround
set title
set spellfile=~/.vim/custom-dictionary.utf-8.add

set ruler                     " show the line number on the bar
set more                      " use more prompt
set autoread                  " watch for file changes
set nohidden                  " close the buffer when I close a tab
set lazyredraw                " don't redraw when don't have to
set showmode                  " show mode on last line
set showcmd                   " Show us the command we're typing
set nocompatible              " vim, not vi
set showfulltag               " show full completion tags
set noerrorbells              " no error bells please
set linebreak
set cmdheight=2               " command line two lines high
set undolevels=1000           " 1000 undos
set updatecount=100           " switch every 100 chars
set ttyfast                   " we have a fast terminal
set foldmethod=manual         " only manual folding
set whichwrap+=<,>,h,l        " backspaces and cursor keys wrap to
set magic                     " Enable the "magic"
set visualbell t_vb=          " Disable ALL bells
set cursorline                " show the cursor line
set matchpairs+=<:>           " add < and > to match pairs
set t_Co=256
set virtualedit+=block
set laststatus=2

" Time out on key codes but not mappings.
set notimeout
set ttimeout
set ttimeoutlen=10

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

let mapleader = ","
let maplocalleader=','        " all my macros start with ,

" strip all whitespaces at save
autocmd BufWritePre * :%s/\s\+$//e

autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent! loadview

" improve editing TeX files
autocmd Bufread,BufNewFile  *.tex setlocal tabstop=2 shiftwidth=2 spell

syntax on
set background=dark
colorscheme gruvbox
let g:AutoClosePreservDotReg=0


" ---------------------------------------------------------------------------
" autosave and -read
" interesting events:
" InsertLeave, TextChanged, CursorHold
" TextChangedI, CursorHoldI
" FocusGained, FocusLost
" (needs events configured coming from the terminal or tmux, check if that works)
set autoread
set updatetime=500
augroup autosave
    autocmd!
    autocmd InsertLeave,TextChanged * silent! w
    autocmd CursorHold,CursorHoldI * silent! update
    autocmd FocusLost * silent! wa
    autocmd FocusGained * checktime
augroup END
" problems:
" should not run :w when buffer has no file
" silent! surpressed that error messages
" but would be nicer not to try at all
" CursorHoldI doesn't seem to trigger update currently


" ---------------------------------------------------------------------------
"  searching

" Use sane regexes.
nnoremap / /\v
vnoremap / /\v

set incsearch                 " incremental search
set ignorecase                " search ignoring case
set smartcase                 " Ignore case when searching lowercase
set hlsearch                  " highlight the search
set showmatch                 " show matching bracket
set gdefault                  " automatically use /g with search & replace

" Clear matches
noremap <leader><space> :noh<cr>:call clearmatches()<cr>

" Open a Quickfix window for the last search.
nnoremap <silent> <leader>? :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>

set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=*.luac                           " Lua byte code
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files


" ---------------------------------------------------------------------------
"  mouse stuff

set mousehide                 " hide the mouse when typing
map <MouseMiddle> <esc>"*p    " this makes the mouse paste a block of text without formatting it
" (good for code)


" ---------------------------------------------------------------------------
"  backup options
set nobackup
set nowritebackup
set noswapfile
set noundofile


" ---------------------------------------------------------------------------
" spelling...

if v:version >= 700

  setlocal spell spelllang=en_us
  nmap <LocalLeader>ss :set spell!<CR>

endif
" default to no spelling
set nospell
set dictionary=/usr/share/dict/words


" ---------------------------------------------------------------------------
" tabs
map <LocalLeader>tc :tabnew %<cr>    " create a new tab
map <LocalLeader>td :tabclose<cr>    " close a tab
map <LocalLeader>tn :tabnext<cr>     " next tab
map <LocalLeader>tp :tabprev<cr>     " previous tab


" ---------------------------------------------------------------------------
" some useful mappings

map <LocalLeader>ww :set wrap!<cr> " toggle wrapping (on or off)
nmap <LocalLeader>tl :set list!<cr>   " toggle list mode
nmap <LocalLeader>pp :set paste!<cr>  " toggle paste mode
nmap <LocalLeader>wm  :w<cr>:make<cr> " save and build
map <LocalLeader>r 1z=                " When I'm pretty sure that the first suggestion is correct
imap jj <Esc>                         " When I forget I'm in Insert mode, how often do you type 'jj' anyway?:

nnoremap <leader>q gqip
nnoremap <leader>v V']
nnoremap gp `[v`]                     " select last pasted lines

" undo tree (gundo)
nnoremap <F5> :GundoToggle<CR>

" no arrow keys ;)
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>


" ---------------------------------------------------------------------------
" Settings for Easymotion

nmap s <Plug>(easymotion-overwin-f)
map <Leader>' <Plug>(easymotion-prefix)


" ---------------------------------------------------------------------------
" Settings for jedi

let g:jedi#use_splits_not_buffers = "right"
let g:jedi#popup_on_dot = 0
let g:jedi#show_call_signatures = "2"

let g:jedi#goto_command = ''
nmap <leader>dd :call jedi#goto()<cr>zt " not sure if that is
nmap <leader>dt :tab split<cr>,dd
nmap <leader>ds <c-w>s,dd
nmap <leader>dv <c-w>v,dd
nmap <leader>dp <c-w>} " alternative for preview on tag


" ---------------------------------------------------------------------------
" Ctrl-P

let g:ctrlp_working_path_mode = 0 " always base off initial working folder
let g:ctrlp_switch_buffer = 0 " don't switch between splits when selecting a file/buffer to open, stay on split, makes it easier to open same file in many splits
"let g:ctrlp_jump_to_buffer = 0
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20,results:20'

let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_match_current_file = 1 " match files even when it's the current file
let g:ctrlp_map = '<leader>,'
nnoremap <leader>. :CtrlPTag<cr>
nnoremap <leader>t :CtrlPBufTag<cr>
nnoremap <leader>b :CtrlPBuffer<cr>

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_match_window_reversed = 1
let g:ctrlp_max_height = 20
let g:ctrlp_extensions = ['tag']
let g:ctrlp_open_new_file = 'v'

let g:ctrlp_prompt_mappings = {
\ 'PrtSelectMove("j")':   ['<c-j>', '<down>', '<s-tab>'],
\ 'PrtSelectMove("k")':   ['<c-k>', '<up>', '<tab>'],
\ 'PrtHistory(-1)':       ['<c-n>'],
\ 'PrtHistory(1)':        ['<c-p>'],
\ 'ToggleFocus()':        ['<c-tab>'],
\ }

let ctrlp_filter_greps = "".
    \ "egrep -iv '\\.(" .
    \ "jar|class|swp|swo|log|so|o|pyc|jpe?g|png|gif|mo|po" .
    \ ")$' | " .
    \ "egrep -v '^(\\./)?(" .
    \ "deploy/|lib/|classes/|libs/|deploy/vendor/|.git/|.hg/|.svn/|.*migrations/" .
    \ ")'"

let my_ctrlp_user_command = "" .
    \ "find %s '(' -type f -or -type l ')' -maxdepth 15 -not -path '*/\\.*/*' | " .
    \ ctrlp_filter_greps

let my_ctrlp_git_command = "" .
    \ "cd %s && git ls-files | " .
    \ ctrlp_filter_greps

let g:ctrlp_user_command = ['.git/', my_ctrlp_git_command, my_ctrlp_user_command]


" ---------------------------------------------------------------------------
" Fugitive / Git

nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>ga :Gadd<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gco :Gcheckout<cr>
nnoremap <leader>gci :Gcommit<cr>
nnoremap <leader>gm :Gmove<cr>
nnoremap <leader>gr :Gremove<cr>
"nnoremap <leader>gl :Shell git l19<cr>:wincmd \|<cr>

augroup ft_fugitive
    au!

    au BufNewFile,BufRead .git/index setlocal nolist
augroup END

" "Hub"
nnoremap <leader>H :Gbrowse<cr>
vnoremap <leader>H :Gbrowse<cr>

" Extradite
nnoremap <leader>gh :Extradite!<cr>


" ---------------------------------------------------------------------------
" Syntastic
" sudo -H pip install flake8
" flake8 syntax python 2 vs 3 is decided when installing flake8
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
let g:pymode_python = 'python3'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_python_checkers = ['flake8', 'pylint']
let g:syntastic_quiet_messages = { "type": "style" } " remove all style warnings
"let g:syntastic_python_flake8_args='--ignore=E501,E225,E251,E231,W191'
let g:syntastic_python_pylint_args='--disable=bad-continuation,bad-whitespace,too-many-locals,mixed-indentation,line-too-long,import-error'

let g:syntastic_aggregate_errors = 1
let g:syntastic_auto_jump = 0
let g:syntastic_mode_map = {"mode":"passive"}

nmap <leader>sc :w<cr>:SyntasticCheck<cr>
nmap <leader>sr :SyntasticReset<cr>
nmap ]l :lnext<CR>
nmap [l :lprev<CR>

" ---------------------------------------------------------------------------
